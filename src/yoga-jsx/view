/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 * @format
 */

import React, { Component } from 'react'
import yoga, { Node, YogaDirection, YogaNode } from 'yoga-layout-prebuilt'
// import PositionGuide from './PositionGuide';
// import PositionRecord from './PositionRecord';
// import LayoutRecord from './LayoutRecord';
// import type {LayoutRecordT} from './LayoutRecord';

import './YogaNode.css'

type ComputedLayout = {
  left: number
  top: number
  width: number
  height: number
  children: Array<ComputedLayout>
  node: YogaNode
}

type Props = {
  layoutDefinition: any
  className?: string
  computedLayout?: ComputedLayout
  direction?: YogaDirection
  label?: string
}

type State = {
  visible?: boolean
  hovered: boolean
}

export default class YogaNodeDiv extends Component<Props, State> {
  node: YogaNode | undefined

  static defaultProps = {
    path: [],
    label: 'root',
    showGuides: true
  }

  state = {
    hovered: false
  }
  computedLayout?: ComputedLayout
  rootNode?: YogaNode

  constructor(props: Props) {
    super(props)
    if (!props.computedLayout) {
      // is root node
      this.calculateLayout(props)
    }
  }

  componentDidMount() {
    setTimeout(() => this.setState({ visible: true }), 200)
  }

  componentWillReceiveProps(nextProps: Props) {
    if (
      !nextProps.computedLayout &&
      (!this.props.layoutDefinition.equals(nextProps.layoutDefinition) || this.props.direction !== nextProps.direction)
    ) {
      // is root node and the layout definition or settings changed
      this.calculateLayout(nextProps)
    }
  }

  componentWillUnmount() {
    if (this.rootNode) {
      this.rootNode.freeRecursive()
    }
  }

  onMouseMove = (e) => {
    this.setState({ hovered: e.target === this._ref })
  }

  calculateLayout(props: Props) {
    const root = this.createYogaNodes(props.layoutDefinition)
    root.calculateLayout(props.layoutDefinition.width, props.layoutDefinition.height, props.direction)
    this.computedLayout = this.getComputedLayout(root)
    this.rootNode = root
  }

  createYogaNodes = (layoutDefinition: LayoutRecordT): Yoga$Node => {
    const root = Node.create()

    const defaultLayout = LayoutRecord({})
    ;[
      'width',
      'height',
      'minWidth',
      'maxWidth',
      'minHeight',
      'maxHeight',
      'justifyContent',
      'alignItems',
      'alignSelf',
      'alignContent',
      'flexGrow',
      'flexShrink',
      'positionType',
      'aspectRatio',
      'flexWrap',
      'flexDirection'
    ].forEach((key) => {
      try {
        const value = layoutDefinition[key] === '' ? defaultLayout[key] : layoutDefinition[key]
        root[`set${key[0].toUpperCase()}${key.substr(1)}`](value)
      } catch (e) {}
    })
    ;['padding', 'margin', 'position', 'border'].forEach((key) => {
      ;['top', 'right', 'bottom', 'left'].forEach((direction) => {
        try {
          root[`set${key[0].toUpperCase()}${key.substr(1)}`](
            yoga[`EDGE_${direction.toUpperCase()}`],
            layoutDefinition[key][direction]
          )
        } catch (e) {}
      })
    })

    root.setDisplay(yoga.DISPLAY_FLEX)
    ;(layoutDefinition.children || []).map(this.createYogaNodes).forEach((node, i) => {
      root.insertChild(node, i)
    })
    return root
  }

  getComputedLayout = (node: YogaNode): ComputedLayout => {
    return {
      ...node.getComputedLayout(),
      node,
      children: Array.from({ length: node.getChildCount() }, (_, i) => this.getComputedLayout(node.getChild(i)))
    }
  }

  render() {
    const { layoutDefinition } = this.props

    // $FlowFixMe
    const computedLayout: ComputedLayout = this.props.computedLayout || this.computedLayout!
    const { left, top, width, height, children } = computedLayout
    const isRoot = false
    return (
      <div className="YogaNode" style={isRoot ? { width, height } : { left, top, width, height }}>
        {(children || []).map((child: ComputedLayout, i) => (
          <YogaNodeDiv
            key={i}
            computedLayout={child}
            label={String(i + 1)}
            layoutDefinition={layoutDefinition.children.get(i)}
          />
        ))}
      </div>
    )
  }
}
